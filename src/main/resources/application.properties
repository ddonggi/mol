# NOTE : DATABASE - Local
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
# Win
#spring.datasource.url=jdbc:h2:~/local
#spring.datasource.driverClassName=org.h2.Driver
# Mac
spring.datasource.url=jdbc:h2:tcp://localhost/~/dglee
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# NOTE : JPA Local
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

# DATABASE - Release
#spring.sql.init.platform=postgres
#spring.datasource.url=jdbc:postgresql://172.30.1.26:5432/dglee_db
#spring.datasource.username=o2o_db_admin
#spring.datasource.password=aio2o0656)^%^

# DDL 생성시 데이터 베이스 고유의 기능을 사용하는지에 대한 유무 ( postgres )
# spring.jpa.generate-ddl=true

# ddl-auto : create(기존 테이블 삭제 후 다시생성), create-drop(테스트용 : 실행시 create - 종류 후 drop), validate(entity와 table 맵핑 반단), update(변경분만 반영), none (아무것도 하지 않음)
# NOTE : create 는 테스트단계에서만 쓰고, 운영단계에서는 쓰지 말 것
spring.jpa.hibernate.ddl-auto=none

# logging for sql
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=false

#위의 출력은 System.out 에 Log 가 출력된다. logger 에서 출력하는 logging.level 을 사용하자.
#logging.level.org.hibernate=DEBUG
